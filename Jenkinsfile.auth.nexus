pipeline {
    agent any
    
    parameters {
        string(name: 'TAG', defaultValue: 'latest', description: 'Tag (e.g. 1.0.0) for build and deploy')
    }
    
    environment {
        SERVICE_DIR = 'auth'
        GITHUB_REPO = 'https://github.com/tepbuphatakim/msit-devops-cluster.git'
        NEXUS_URL = 'localhost:8082'
        NEXUS_URL_PRIVATE = '172.31.85.200:8082'
        NEXUS_REPOSITORY = 'docker-hosted'
        IMAGE_NAME = 'msit-devops-cluster-auth'
        NEXUS_CREDENTIALS_ID = 'nexus-credentials'
        GITHUB_TOKEN_ID = 'github-token'
        EC2_PRIVATE_IP = '172.31.21.205'
        SSH_CREDENTIALS_ID = 'ec2-ssh-key'
        TELEGRAM_BOT_TOKEN_ID = 'telegram-bot-token'
        TELEGRAM_CHAT_ID = '-1002846438854'
    }

    stages {
        stage('Checkout') {
            steps {
                cleanWs()
                withCredentials([string(credentialsId: GITHUB_TOKEN_ID, variable: 'GITHUB_TOKEN')]) {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: '*/main']],
                        userRemoteConfigs: [[
                            url: "https://oauth2:\${GITHUB_TOKEN}@github.com/tepbuphatakim/msit-devops-cluster.git"
                        ]]
                    ])
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir("${SERVICE_DIR}") {
                    script {
                        sh "docker build -t ${NEXUS_URL}/${NEXUS_REPOSITORY}/${IMAGE_NAME}:${params.TAG} ."
                    }
                }
            }
        }

        stage('Push to Nexus Registry') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: NEXUS_CREDENTIALS_ID,
                    usernameVariable: 'NEXUS_USER',
                    passwordVariable: 'NEXUS_PASSWORD'
                )]) {
                    script {
                        sh "echo \${NEXUS_PASSWORD} | docker login ${NEXUS_URL} -u \${NEXUS_USER} --password-stdin"
                        
                        sh "docker push ${NEXUS_URL}/${NEXUS_REPOSITORY}/${IMAGE_NAME}:${params.TAG}"
                    }
                }
            }
        }

        stage('Update Docker Compose') {
            steps {
                withCredentials([string(credentialsId: GITHUB_TOKEN_ID, variable: 'GITHUB_TOKEN')]) {
                    script {
                        sh """
                            git config user.email "kimtepbuphata009@gmail.com"
                            git config user.name "Jenkins"
                            
                            # Update docker-compose.yml with new image tag
                            sed -i "s|image: ${NEXUS_URL_PRIVATE}/${NEXUS_REPOSITORY}/${IMAGE_NAME}:.*|image: ${NEXUS_URL_PRIVATE}/${NEXUS_REPOSITORY}/${IMAGE_NAME}:${params.TAG}|" docker-compose.app.nexus.yml
                            
                            git remote set-url origin https://oauth2:\${GITHUB_TOKEN}@github.com/tepbuphatakim/msit-devops-cluster.git
                            
                            git add docker-compose.app.nexus.yml
                            git commit -m "Update ${SERVICE_DIR} service image to version ${params.TAG}"
                            git push origin HEAD:main
                        """
                    }
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                withCredentials([sshUserPrivateKey(
                    credentialsId: SSH_CREDENTIALS_ID,
                    keyFileVariable: 'SSH_KEY',
                    usernameVariable: 'SSH_USER'
                )]) {
                    script {
                        sh """
                            mkdir -p ~/.ssh
                            ssh-keyscan -H ${EC2_PRIVATE_IP} >> ~/.ssh/known_hosts
                            
                            ssh -i \${SSH_KEY} \${SSH_USER}@${EC2_PRIVATE_IP} "sudo -S bash -c 'cd /var/msit-devops-cluster && git pull origin main && chmod +x start.sh && ./start.sh'"
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            sh "docker logout ${NEXUS_URL} || true"
            cleanWs()
        }
        success {
            echo "Successfully built and pushed ${NEXUS_URL}/${NEXUS_REPOSITORY}/${IMAGE_NAME}:${params.TAG}"
            withCredentials([string(credentialsId: TELEGRAM_BOT_TOKEN_ID, variable: 'BOT_TOKEN')]) {
                sh """
                    curl -s -X POST https://api.telegram.org/bot\${BOT_TOKEN}/sendMessage \
                    -d chat_id=${TELEGRAM_CHAT_ID} \
                    -d text="✅ *SUCCESS*:\\nPipeline: ${IMAGE_NAME} with tag: ${params.TAG} was successful!" \
                    -d parse_mode=Markdown
                """
            }
        }
        failure {
            echo "Failed to build or push ${NEXUS_URL}/${NEXUS_REPOSITORY}/${IMAGE_NAME}:${params.TAG}"
            withCredentials([string(credentialsId: TELEGRAM_BOT_TOKEN_ID, variable: 'BOT_TOKEN')]) {
                sh """
                    curl -s -X POST https://api.telegram.org/bot\${BOT_TOKEN}/sendMessage \
                    -d chat_id=${TELEGRAM_CHAT_ID} \
                    -d text="❌ *FAILED*:\\nPipeline: ${IMAGE_NAME} with tag: ${params.TAG} has failed." \
                    -d parse_mode=Markdown
                """
            }
        }
    }
}
